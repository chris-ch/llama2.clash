-- Step 2: Weight Buffer - Accumulates streaming rows into complete matrices
--
-- This module receives one weight row at a time and accumulates them
-- into complete Q/K/V matrices for all heads.

module LLaMa2.Layer.Attention.WeightBuffer where

import Clash.Prelude
import LLaMa2.Types.ModelConfig 
  ( ModelDimension, HeadDimension, NumQueryHeads, NumKeyValueHeads )
import LLaMa2.Numeric.Quantization (RowI8E, MatI8E)

-- Import the addressing types from Step 1
-- (In real code, these would come from WeightLoader)
data WeightAddress = WeightAddress
  { rowIndex    :: Index HeadDimension
  , matrixType  :: WeightMatrixType
  , headIndex   :: Unsigned 8
  } deriving (Show, Generic, NFDataX, Eq)

data WeightMatrixType = QMatrix | KMatrix | VMatrix
  deriving (Show, Generic, NFDataX, Eq, Enum, Bounded)

-- ============================================================================
-- Weight Buffer for Single Head (simplest version)
-- ============================================================================

-- | Buffer for ONE head's Q/K/V matrices
data SingleHeadWeightBuffer = SingleHeadWeightBuffer
  { wqBuf :: MatI8E HeadDimension ModelDimension
  , wkBuf :: MatI8E HeadDimension ModelDimension
  , wvBuf :: MatI8E HeadDimension ModelDimension
  , loadedRows :: Unsigned 8  -- How many rows loaded so far
  } deriving (Generic, NFDataX)

-- | Initialize empty buffer
emptyHeadBuffer :: SingleHeadWeightBuffer
emptyHeadBuffer = SingleHeadWeightBuffer
  { wqBuf = repeat (repeat 0, 0)  -- Empty MatI8E
  , wkBuf = repeat (repeat 0, 0)
  , wvBuf = repeat (repeat 0, 0)
  , loadedRows = 0
  }

-- | Update buffer with one incoming row
updateHeadBuffer :: 
     Bool                          -- ^ enable (streamValid)
  -> WeightAddress                 -- ^ where to put this row
  -> RowI8E ModelDimension         -- ^ the row data
  -> Unsigned 8                    -- ^ target head number
  -> SingleHeadWeightBuffer        -- ^ current buffer
  -> SingleHeadWeightBuffer        -- ^ updated buffer
updateHeadBuffer enable addr row targetHead buf
  | not enable = buf
  | headIndex addr /= targetHead = buf  -- Not for this head
  | otherwise = case matrixType addr of
      QMatrix -> buf { wqBuf = replace (rowIndex addr) row (wqBuf buf)
                     , loadedRows = loadedRows buf + 1 }
      KMatrix -> buf { wkBuf = replace (rowIndex addr) row (wkBuf buf)
                     , loadedRows = loadedRows buf + 1 }
      VMatrix -> buf { wvBuf = replace (rowIndex addr) row (wvBuf buf)
                     , loadedRows = loadedRows buf + 1 }

-- ============================================================================
-- Weight Buffer for ALL Heads (full version)
-- ============================================================================

-- | Complete buffer for all Q heads
type QHeadBuffers = Vec NumQueryHeads SingleHeadWeightBuffer

-- | Complete buffer for all K/V heads  
type KVHeadBuffers = Vec NumKeyValueHeads SingleHeadWeightBuffer

-- | Full weight buffer state
data QKVWeightBuffer = QKVWeightBuffer
  { qHeadBuffers  :: QHeadBuffers
  , kvHeadBuffers :: KVHeadBuffers
  , fullyLoaded   :: Bool
  } deriving (Generic, NFDataX)

-- | Initialize empty QKV buffer
emptyQKVBuffer :: QKVWeightBuffer
emptyQKVBuffer = QKVWeightBuffer
  { qHeadBuffers  = repeat emptyHeadBuffer
  , kvHeadBuffers = repeat emptyHeadBuffer
  , fullyLoaded   = False
  }

-- | Update the full QKV buffer with one incoming row
updateQKVBuffer ::
     Bool                          -- ^ enable (streamValid)
  -> WeightAddress                 -- ^ where to put this row
  -> RowI8E ModelDimension         -- ^ the row data
  -> Bool                          -- ^ allRowsReceived
  -> QKVWeightBuffer               -- ^ current buffer
  -> QKVWeightBuffer               -- ^ updated buffer
updateQKVBuffer enable addr row allDone buf
  | not enable = buf
  | otherwise = case matrixType addr of
      QMatrix -> 
        let headIdx = unpack (resize (headIndex addr)) :: Index NumQueryHeads
            updatedHeads = replace headIdx 
                          (updateHeadBuffer enable addr row (headIndex addr) 
                                          (qHeadBuffers buf !! headIdx))
                          (qHeadBuffers buf)
        in buf { qHeadBuffers = updatedHeads
               , fullyLoaded = allDone }
      
      KMatrix -> 
        let headIdx = unpack (resize (headIndex addr)) :: Index NumKeyValueHeads
            updatedHeads = replace headIdx
                          (updateHeadBuffer enable addr row (headIndex addr)
                                          (kvHeadBuffers buf !! headIdx))
                          (kvHeadBuffers buf)
        in buf { kvHeadBuffers = updatedHeads
               , fullyLoaded = allDone }
      
      VMatrix -> 
        let headIdx = unpack (resize (headIndex addr)) :: Index NumKeyValueHeads
            updatedHeads = replace headIdx
                          (updateHeadBuffer enable addr row (headIndex addr)
                                          (kvHeadBuffers buf !! headIdx))
                          (kvHeadBuffers buf)
        in buf { kvHeadBuffers = updatedHeads
               , fullyLoaded = allDone }

-- ============================================================================
-- Registered Weight Buffer Controller
-- ============================================================================

-- | Stateful weight buffer that registers the incoming stream
qkvWeightBufferController :: forall dom .
  HiddenClockResetEnable dom
  => Signal dom Bool                       -- ^ streamValid
  -> Signal dom WeightAddress              -- ^ address
  -> Signal dom (RowI8E ModelDimension)    -- ^ weight row
  -> Signal dom Bool                       -- ^ allRowsReceived
  -> Signal dom Bool                       -- ^ reset (new layer)
  -> Signal dom QKVWeightBuffer            -- ^ buffered weights
qkvWeightBufferController streamValid addr row allDone reset = bufferState
  where
    bufferState = regEn emptyQKVBuffer updateEnable nextBuffer
    
    updateEnable = streamValid .||. reset
    
    nextBuffer = mux reset 
                    (pure emptyQKVBuffer)
                    (updateQKVBuffer <$> streamValid <*> addr <*> row 
                                     <*> allDone <*> bufferState)

-- ============================================================================
-- Weight Extraction Helpers
-- ============================================================================

-- | Extract Q matrix for a specific head
extractQWeight :: QKVWeightBuffer -> Index NumQueryHeads -> MatI8E HeadDimension ModelDimension
extractQWeight buf headIdx = wqBuf (qHeadBuffers buf !! headIdx)

-- | Extract K matrix for a specific KV head
extractKWeight :: QKVWeightBuffer -> Index NumKeyValueHeads -> MatI8E HeadDimension ModelDimension
extractKWeight buf headIdx = wkBuf (kvHeadBuffers buf !! headIdx)

-- | Extract V matrix for a specific KV head
extractVWeight :: QKVWeightBuffer -> Index NumKeyValueHeads -> MatI8E HeadDimension ModelDimension
extractVWeight buf headIdx = wvBuf (kvHeadBuffers buf !! headIdx)
